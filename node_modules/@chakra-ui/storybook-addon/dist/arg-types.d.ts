import { ArgTypes } from '@storybook/types';
import { ThemingProps } from '@chakra-ui/react';

declare global {
	interface SymbolConstructor {
		readonly observable: symbol;
	}
}

/**
 * `keyof` alternative which omits non-string keys
 */
type KeyOf<T> = [T] extends [never] ? never : T extends object ? Extract<keyof T, string> : never;
type ThemingArgTypeKey = "variant" | "size" | "colorScheme";
/**
 * Create Storybook controls based on a Chakra UI theme component.
 *
 * @example
 * export default {
 *   title: "Components / Forms / Button",
 *   argTypes: getThemingArgTypes(theme, "Button"),
 * }
 *
 * @example full example
 * import { Meta, StoryFn } from "@storybook/react"
 * import { getThemingArgTypes } from "@chakra-ui/storybook-addon"
 * import { theme } from "<your-theme>"
 *
 * export default {
 *   title: "Components / Forms / Button",
 *   argTypes: {
 *     ...getThemingArgTypes(theme, "Button"),
 *     children: "string"
 *   },
 *   args: { children: "Button" },
 * } as Meta
 *
 * interface StoryProps extends ThemingProps<"Button"> {
 *   children?: React.ReactNode
 * }
 *
 * export const Basic: StoryFn<StoryProps> = (props) => <Button {...props} />
 *
 * @param theme same Chakra UI theme used in .storybook/preview.tsx
 * @param componentName component name to create the ArgTypes for
 */
declare function getThemingArgTypes<Theme extends {
    colors: Record<string, any>;
    components: Record<string, any>;
}, ComponentName extends KeyOf<Theme["components"]>>(theme: Theme, componentName: ComponentName): ArgTypes<Partial<Pick<ThemingProps<ComponentName>, ThemingArgTypeKey>>> | undefined;

export { ThemingArgTypeKey, getThemingArgTypes };
