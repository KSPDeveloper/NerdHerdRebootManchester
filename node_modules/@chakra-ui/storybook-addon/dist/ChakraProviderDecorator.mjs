import { useMemo, useEffect, useState } from 'react';
import { theme, extendTheme, ChakraProvider, useColorMode } from '@chakra-ui/react';
import { addons } from '@storybook/preview-api';
import { jsxs, jsx } from 'react/jsx-runtime';

var m="@chakra-ui/storybook-addon",s=`${m}/direction-tool`,c={TOGGLE_COLOR_MODE:`${m}/toggleColorMode`,TOGGLE_DIRECTION:`${m}/toggleDirection`};function a(){let{setColorMode:r}=useColorMode();return useEffect(()=>{let e=addons.getChannel(),o=t=>r(t);return e.on(c.TOGGLE_COLOR_MODE,o),()=>{e.removeListener(c.TOGGLE_COLOR_MODE,o);}},[r]),null}var l=(r="ltr")=>{let[e,o]=useState(r.toLowerCase());return useEffect(()=>{document.documentElement.dir=e;},[e]),useEffect(()=>{let t=addons.getChannel(),n=i=>o(i);return t.on(c.TOGGLE_DIRECTION,n),()=>{t.removeListener(c.TOGGLE_DIRECTION,n);}},[o]),e};var A=(r,e)=>{let{parameters:{chakra:o},globals:{[s]:t}}=e,n=o?.theme?typeof o.theme=="function"?o.theme(e):o.theme:theme,i=l(t||n?.direction),d=useMemo(()=>extendTheme({direction:i},n),[n,i]);return jsxs(ChakraProvider,{...o,theme:d,children:[jsx(a,{}),r(e)]})};

export { A as ChakraProviderDecorator };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=ChakraProviderDecorator.mjs.map