import { useMemo, useEffect, useState } from 'react';
import { theme, extendTheme, ChakraProvider, useColorMode } from '@chakra-ui/react';
import { addons } from '@storybook/preview-api';
import { jsxs, jsx } from 'react/jsx-runtime';

var m="@chakra-ui/storybook-addon",a=`${m}/direction-tool`,i={TOGGLE_COLOR_MODE:`${m}/toggleColorMode`,TOGGLE_DIRECTION:`${m}/toggleDirection`};function s(){let{setColorMode:e}=useColorMode();return useEffect(()=>{let r=addons.getChannel(),o=t=>e(t);return r.on(i.TOGGLE_COLOR_MODE,o),()=>{r.removeListener(i.TOGGLE_COLOR_MODE,o);}},[e]),null}var l=(e="ltr")=>{let[r,o]=useState(e.toLowerCase());return useEffect(()=>{document.documentElement.dir=r;},[r]),useEffect(()=>{let t=addons.getChannel(),n=c=>o(c);return t.on(i.TOGGLE_DIRECTION,n),()=>{t.removeListener(i.TOGGLE_DIRECTION,n);}},[o]),r};var O=(e,r)=>{let{parameters:{chakra:o},globals:{[a]:t}}=r,n=o?.theme?typeof o.theme=="function"?o.theme(r):o.theme:theme,c=l(t||n?.direction),p=useMemo(()=>extendTheme({direction:c},n),[n,c]);return jsxs(ChakraProvider,{...o,theme:p,children:[jsx(s,{}),e(r)]})};var k={decorators:[O]},B=k;

export { B as default };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=preview.mjs.map