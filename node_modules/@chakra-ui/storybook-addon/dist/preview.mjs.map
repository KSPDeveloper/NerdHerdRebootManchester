{"version":3,"sources":["../src/ChakraProviderDecorator.tsx","../src/color-mode/ColorModeSync.tsx","../src/constants.ts","../src/direction/useDirection.tsx","../src/preview.ts"],"names":["useMemo","ChakraProvider","extendTheme","theme","useEffect","useColorMode","addons","ADDON_ID","COLOR_MODE_TOOL_ID","DIRECTION_TOOL_ID","EVENTS","ColorModeSync","setColorMode","channel","colorModeToolCallback","value","useState","useDirection","initialDirection","direction","setDirection","callback","jsx","jsxs","ChakraProviderDecorator","getStory","context","chakraParams","globalDirection","chakraTheme","themeWithDirectionOverride","preview","preview_default"],"mappings":"AAAA,OAAS,WAAAA,MAAe,QAExB,OAAS,kBAAAC,EAAgB,eAAAC,EAAa,SAAAC,MAAa,mBCFnD,OAAS,aAAAC,MAAiB,QAC1B,OAAS,gBAAAC,MAAoB,mBAC7B,OAAS,UAAAC,MAAc,yBCFhB,IAAMC,EAAW,6BACXC,EAAqB,GAAGD,oBACxBE,EAAoB,GAAGF,mBAEvBG,EAAS,CACpB,kBAAmB,GAAGH,oBACtB,iBAAkB,GAAGA,mBACvB,EDCO,SAASI,GAAgB,CAC9B,GAAM,CAAE,aAAAC,CAAa,EAAIP,EAAa,EAEtC,OAAAD,EAAU,IAAM,CACd,IAAMS,EAAUP,EAAO,WAAW,EAE5BQ,EAAyBC,GAAkBH,EAAaG,CAAK,EACnE,OAAAF,EAAQ,GAAGH,EAAO,kBAAmBI,CAAqB,EAEnD,IAAM,CACXD,EAAQ,eAAeH,EAAO,kBAAmBI,CAAqB,CACxE,CACF,EAAG,CAACF,CAAY,CAAC,EAEV,IACT,CEvBA,OAAS,aAAAR,EAAW,YAAAY,MAAgB,QACpC,OAAS,UAAAV,MAAc,yBAMhB,IAAMW,EAAe,CAACC,EAAkC,QAAU,CACvE,GAAM,CAACC,EAAWC,CAAY,EAAIJ,EAASE,EAAiB,YAAY,CAAC,EAEzE,OAAAd,EAAU,IAAM,CACd,SAAS,gBAAgB,IAAMe,CACjC,EAAG,CAACA,CAAS,CAAC,EAEdf,EAAU,IAAM,CACd,IAAMS,EAAUP,EAAO,WAAW,EAC5Be,EAAYN,GAAkBK,EAAaL,CAAK,EACtD,OAAAF,EAAQ,GAAGH,EAAO,iBAAkBW,CAAQ,EACrC,IAAM,CACXR,EAAQ,eAAeH,EAAO,iBAAkBW,CAAQ,CAC1D,CACF,EAAG,CAACD,CAAY,CAAC,EAEVD,CACT,EHGI,OACE,OAAAG,EADF,QAAAC,MAAA,oBApBG,IAAMC,EAAuD,CAClEC,EACAC,IACG,CACH,GAAM,CACJ,WAAY,CAAE,OAAQC,CAAa,EACnC,QAAS,CAAE,CAAClB,CAAiB,EAAGmB,CAAgB,CAClD,EAAIF,EACEG,EAAcF,GAAc,MAC9B,OAAOA,EAAa,OAAU,WAC5BA,EAAa,MAAMD,CAAO,EAC1BC,EAAa,MACfxB,EACEgB,EAAYF,EAAaW,GAAmBC,GAAa,SAAS,EAClEC,EAA6B9B,EACjC,IAAME,EAAY,CAAE,UAAAiB,CAAU,EAAGU,CAAW,EAC5C,CAACA,EAAaV,CAAS,CACzB,EAEA,OACEI,EAACtB,EAAA,CAAgB,GAAG0B,EAAc,MAAOG,EACvC,UAAAR,EAACX,EAAA,EAAc,EACdc,EAASC,CAAO,GACnB,CAEJ,EI7BA,IAAMK,EAAwC,CAC5C,WAAY,CAACP,CAAuB,CACtC,EAEOQ,EAAQD","sourcesContent":["import { useMemo } from \"react\"\nimport type { DecoratorFunction, Renderer } from \"@storybook/types\"\nimport { ChakraProvider, extendTheme, theme } from \"@chakra-ui/react\"\nimport { ColorModeSync } from \"./color-mode/ColorModeSync\"\nimport { useDirection } from \"./direction/useDirection\"\nimport { DIRECTION_TOOL_ID } from \"./constants\"\n\nexport const ChakraProviderDecorator: DecoratorFunction<Renderer> = (\n  getStory,\n  context,\n) => {\n  const {\n    parameters: { chakra: chakraParams },\n    globals: { [DIRECTION_TOOL_ID]: globalDirection },\n  } = context\n  const chakraTheme = chakraParams?.theme\n    ? typeof chakraParams.theme === \"function\"\n      ? chakraParams.theme(context)\n      : chakraParams.theme\n    : theme\n  const direction = useDirection(globalDirection || chakraTheme?.direction)\n  const themeWithDirectionOverride = useMemo(\n    () => extendTheme({ direction }, chakraTheme),\n    [chakraTheme, direction],\n  )\n\n  return (\n    <ChakraProvider {...chakraParams} theme={themeWithDirectionOverride}>\n      <ColorModeSync />\n      {getStory(context)}\n    </ChakraProvider>\n  )\n}\n","import { useEffect } from \"react\"\nimport { useColorMode } from \"@chakra-ui/react\"\nimport { addons } from \"@storybook/preview-api\"\nimport { EVENTS } from \"../constants\"\n\n/**\n * Render <ColorModeSync /> to sync the storybook color mode with Chakra UI\n */\nexport function ColorModeSync() {\n  const { setColorMode } = useColorMode()\n\n  useEffect(() => {\n    const channel = addons.getChannel()\n\n    const colorModeToolCallback = (value: string) => setColorMode(value)\n    channel.on(EVENTS.TOGGLE_COLOR_MODE, colorModeToolCallback)\n\n    return () => {\n      channel.removeListener(EVENTS.TOGGLE_COLOR_MODE, colorModeToolCallback)\n    }\n  }, [setColorMode])\n\n  return null\n}\n","export const ADDON_ID = \"@chakra-ui/storybook-addon\"\nexport const COLOR_MODE_TOOL_ID = `${ADDON_ID}/color-mode-tool`\nexport const DIRECTION_TOOL_ID = `${ADDON_ID}/direction-tool`\n\nexport const EVENTS = {\n  TOGGLE_COLOR_MODE: `${ADDON_ID}/toggleColorMode`,\n  TOGGLE_DIRECTION: `${ADDON_ID}/toggleDirection`,\n}\n","import { useEffect, useState } from \"react\"\nimport { addons } from \"@storybook/preview-api\"\nimport { EVENTS } from \"../constants\"\n\n/**\n * Sync the layout direction to the html element\n */\nexport const useDirection = (initialDirection: \"ltr\" | \"rtl\" = \"ltr\") => {\n  const [direction, setDirection] = useState(initialDirection.toLowerCase())\n\n  useEffect(() => {\n    document.documentElement.dir = direction\n  }, [direction])\n\n  useEffect(() => {\n    const channel = addons.getChannel()\n    const callback = (value: string) => setDirection(value)\n    channel.on(EVENTS.TOGGLE_DIRECTION, callback)\n    return () => {\n      channel.removeListener(EVENTS.TOGGLE_DIRECTION, callback)\n    }\n  }, [setDirection])\n\n  return direction\n}\n","import { Renderer, ProjectAnnotations } from \"@storybook/types\"\nimport { ChakraProviderDecorator } from \"./ChakraProviderDecorator\"\n\nconst preview: ProjectAnnotations<Renderer> = {\n  decorators: [ChakraProviderDecorator],\n}\n\nexport default preview\n"]}